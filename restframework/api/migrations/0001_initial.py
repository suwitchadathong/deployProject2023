# Generated by Django 4.2.10 on 2024-04-08 07:30

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('chapterid', models.AutoField(db_column='ChapterID', primary_key=True, serialize=False)),
                ('namechapter', models.TextField(blank=True, db_column='NameChapter', null=True)),
                ('infochapter', models.TextField(blank=True, db_column='InfoChapter', null=True)),
            ],
            options={
                'db_table': 'Chapter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chapteranswer',
            fields=[
                ('chapteranswerid', models.AutoField(db_column='ChapterAnswerID', primary_key=True, serialize=False)),
                ('answerchapter', models.TextField(blank=True, db_column='AnswerChapter', null=True)),
            ],
            options={
                'db_table': 'ChapterAnswer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatClockedschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clocked_time', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_celery_beat_clockedschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatCrontabschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.CharField(max_length=240)),
                ('hour', models.CharField(max_length=96)),
                ('day_of_week', models.CharField(max_length=64)),
                ('day_of_month', models.CharField(max_length=124)),
                ('month_of_year', models.CharField(max_length=64)),
                ('timezone', models.CharField(max_length=63)),
            ],
            options={
                'db_table': 'django_celery_beat_crontabschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatIntervalschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('every', models.IntegerField()),
                ('period', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'django_celery_beat_intervalschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatPeriodictask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('task', models.CharField(max_length=200)),
                ('args', models.TextField()),
                ('kwargs', models.TextField()),
                ('queue', models.CharField(blank=True, max_length=200, null=True)),
                ('exchange', models.CharField(blank=True, max_length=200, null=True)),
                ('routing_key', models.CharField(blank=True, max_length=200, null=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('enabled', models.BooleanField()),
                ('last_run_at', models.DateTimeField(blank=True, null=True)),
                ('total_run_count', models.IntegerField()),
                ('date_changed', models.DateTimeField()),
                ('description', models.TextField()),
                ('one_off', models.BooleanField()),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('priority', models.IntegerField(blank=True, null=True)),
                ('headers', models.TextField()),
                ('expire_seconds', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_celery_beat_periodictask',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatPeriodictasks',
            fields=[
                ('ident', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('last_update', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_celery_beat_periodictasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatSolarschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(max_length=24)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
            ],
            options={
                'db_table': 'django_celery_beat_solarschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryResultsChordcounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.CharField(max_length=255, unique=True)),
                ('sub_tasks', models.TextField()),
                ('count', models.IntegerField()),
            ],
            options={
                'db_table': 'django_celery_results_chordcounter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryResultsGroupresult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.CharField(max_length=255, unique=True)),
                ('date_created', models.DateTimeField()),
                ('date_done', models.DateTimeField()),
                ('content_type', models.CharField(max_length=128)),
                ('content_encoding', models.CharField(max_length=64)),
                ('result', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_celery_results_groupresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryResultsTaskresult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(max_length=50)),
                ('content_type', models.CharField(max_length=128)),
                ('content_encoding', models.CharField(max_length=64)),
                ('result', models.TextField(blank=True, null=True)),
                ('date_done', models.DateTimeField()),
                ('traceback', models.TextField(blank=True, null=True)),
                ('meta', models.TextField(blank=True, null=True)),
                ('task_args', models.TextField(blank=True, null=True)),
                ('task_kwargs', models.TextField(blank=True, null=True)),
                ('task_name', models.CharField(blank=True, max_length=255, null=True)),
                ('worker', models.CharField(blank=True, max_length=100, null=True)),
                ('date_created', models.DateTimeField()),
                ('periodic_task_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'django_celery_results_taskresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('examid', models.AutoField(db_column='ExamID', primary_key=True, serialize=False)),
                ('examname', models.TextField(blank=True, db_column='ExamName', null=True)),
                ('examno', models.IntegerField(blank=True, db_column='ExamNo', null=True)),
                ('numberofexams', models.IntegerField(blank=True, db_column='NumberofExams', null=True)),
                ('numberofexamsets', models.IntegerField(blank=True, db_column='NumberofExamSets', null=True)),
                ('answersheetformat', models.TextField(blank=True, db_column='AnswerSheetFormat', null=True)),
                ('imganswersheetformat_path', models.TextField(blank=True, db_column='ImgAnswerSheetformat_path', null=True)),
                ('std_csv_path', models.TextField(blank=True, db_column='Std_csv_path', null=True)),
                ('result_csv_path', models.TextField(blank=True, db_column='Result_csv_path', null=True)),
                ('analysis_csv_path', models.TextField(blank=True, db_column='Analysis_csv_path', null=True)),
                ('sequencesteps', models.TextField(blank=True, db_column='SequenceSteps', null=True)),
                ('showscores', models.IntegerField(blank=True, db_column='ShowScores', null=True)),
                ('sendemail', models.IntegerField(blank=True, db_column='SendEmail', null=True)),
                ('statusexam', models.TextField(blank=True, db_column='StatusExam', null=True)),
                ('deletetimeexam', models.DateTimeField(blank=True, db_column='DeleteTimeExam', null=True)),
                ('createtimeexam', models.DateTimeField(blank=True, db_column='CreateTimeExam', null=True)),
            ],
            options={
                'db_table': 'Exam',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Examanswers',
            fields=[
                ('examanswersid', models.AutoField(db_column='ExamAnswersID', primary_key=True, serialize=False)),
                ('examnoanswers', models.CharField(blank=True, db_column='ExamNoAnswers', max_length=2, null=True)),
                ('scoringcriteria', models.TextField(blank=True, db_column='ScoringCriteria', null=True)),
                ('choiceanswers', models.TextField(blank=True, db_column='ChoiceAnswers', null=True)),
                ('papeans_path', models.TextField(blank=True, db_column='PapeAns_path', null=True)),
            ],
            options={
                'db_table': 'ExamAnswers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Examinformation',
            fields=[
                ('examinfoid', models.AutoField(db_column='ExamInfoID', primary_key=True, serialize=False)),
                ('stdid', models.CharField(blank=True, db_column='StdID', max_length=20, null=True)),
                ('stdemail', models.CharField(blank=True, db_column='StdEmail', max_length=255, null=True)),
                ('subjectidstd', models.CharField(blank=True, db_column='SubjectIDStd', max_length=20, null=True)),
                ('examseatnumber', models.CharField(blank=True, db_column='ExamSeatNumber', max_length=20, null=True)),
                ('setexaminfo', models.IntegerField(blank=True, db_column='SetExamInfo', null=True)),
                ('section', models.CharField(blank=True, db_column='Section', max_length=20, null=True)),
                ('score', models.FloatField(blank=True, db_column='Score', null=True)),
                ('correct', models.IntegerField(blank=True, db_column='Correct', null=True)),
                ('wrong', models.IntegerField(blank=True, db_column='Wrong', null=True)),
                ('unresponsive', models.IntegerField(blank=True, db_column='Unresponsive', null=True)),
                ('itemanalysis', models.TextField(blank=True, db_column='ItemAnalysis', null=True)),
                ('anschoicestd', models.TextField(blank=True, db_column='AnsChoiceStd', null=True)),
                ('imgansstd_path', models.TextField(blank=True, db_column='ImgAnsStd_path', null=True)),
                ('errorstype', models.TextField(blank=True, db_column='ErrorsType', null=True)),
                ('createtimeexaminfo', models.DateTimeField(blank=True, db_column='CreateTimeExaminfo', null=True)),
            ],
            options={
                'db_table': 'ExamInformation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Queheaddetails',
            fields=[
                ('queheaddetailsid', models.AutoField(db_column='QueHeadDetailsID', primary_key=True, serialize=False)),
                ('quehead1', models.TextField(blank=True, db_column='QueHead1', null=True)),
                ('quehead2', models.TextField(blank=True, db_column='QueHead2', null=True)),
                ('quehead3', models.TextField(blank=True, db_column='QueHead3', null=True)),
                ('quehead4', models.TextField(blank=True, db_column='QueHead4', null=True)),
                ('quehead5', models.TextField(blank=True, db_column='QueHead5', null=True)),
            ],
            options={
                'db_table': 'QueHeadDetails',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Queinformation',
            fields=[
                ('queinfoid', models.AutoField(db_column='QueInfoID', primary_key=True, serialize=False)),
                ('ansquehead', models.TextField(blank=True, db_column='AnsQueHead', null=True)),
                ('ansquetopic', models.TextField(blank=True, db_column='AnsQueTopic', null=True)),
                ('ansother', models.TextField(blank=True, db_column='AnsOther', null=True)),
                ('additionalsuggestions', models.TextField(blank=True, db_column='Additionalsuggestions', null=True)),
                ('imgansstd_path', models.TextField(blank=True, db_column='ImgAnsStd_path', null=True)),
                ('status_queinfo', models.TextField(blank=True, db_column='Status_QueInfo', null=True)),
                ('errorstype', models.TextField(blank=True, db_column='ErrorsType', null=True)),
                ('createtimequesheetinfo', models.DateTimeField(blank=True, db_column='CreateTimeQueSheetinfo', null=True)),
            ],
            options={
                'db_table': 'QueInformation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Quesheet',
            fields=[
                ('quesheetid', models.AutoField(db_column='QueSheetID', primary_key=True, serialize=False)),
                ('quesheetname', models.TextField(blank=True, db_column='QueSheetName', null=True)),
                ('quesheettopicname', models.TextField(blank=True, db_column='QueSheetTopicName', null=True)),
                ('detailslineone', models.TextField(blank=True, db_column='DetailsLineOne', null=True)),
                ('detailslinetwo', models.TextField(blank=True, db_column='DetailsLineTwo', null=True)),
                ('imgquesheet_path', models.TextField(blank=True, db_column='ImgQueSheet_path', null=True)),
                ('resultpart1_csv_path', models.TextField(blank=True, db_column='ResultPart1_csv_path', null=True)),
                ('resultpart2_csv_path', models.TextField(blank=True, db_column='ResultPart2_csv_path', null=True)),
                ('datetimestart', models.DateTimeField(blank=True, db_column='DateTimeStart', null=True)),
                ('datetimeend', models.DateTimeField(blank=True, db_column='DateTimeEnd', null=True)),
                ('sequencesteps', models.TextField(blank=True, db_column='SequenceSteps', null=True)),
                ('statusquesheet', models.TextField(blank=True, db_column='StatusQueSheet', null=True)),
                ('deletetimequesheet', models.DateTimeField(blank=True, db_column='DeleteTimeQueSheet', null=True)),
                ('createtimequesheet', models.DateTimeField(blank=True, db_column='CreateTimeQueSheet', null=True)),
            ],
            options={
                'db_table': 'QueSheet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Quetopicdetails',
            fields=[
                ('quetopicdetailsid', models.AutoField(db_column='QueTopicDetailsID', primary_key=True, serialize=False)),
                ('quetopicdetails', models.TextField(blank=True, db_column='QueTopicDetails', null=True)),
                ('quetopicformat', models.TextField(blank=True, db_column='QueTopicFormat', null=True)),
            ],
            options={
                'db_table': 'QueTopicDetails',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('requestid', models.AutoField(db_column='RequestID', primary_key=True, serialize=False)),
                ('imgrequest_path', models.TextField(blank=True, db_column='ImgRequest_path', null=True)),
                ('notes', models.TextField(blank=True, db_column='Notes', null=True)),
                ('status_request', models.TextField(blank=True, db_column='Status_Request', null=True)),
            ],
            options={
                'db_table': 'Request',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Subchapter',
            fields=[
                ('subchapterid', models.AutoField(db_column='SubChapterID', primary_key=True, serialize=False)),
                ('numsubchapter', models.TextField(blank=True, db_column='NumSubChapter', null=True)),
                ('namesubchapter', models.TextField(blank=True, db_column='NameSubChapter', null=True)),
                ('infosubchapter', models.TextField(blank=True, db_column='InfoSubChapter', null=True)),
            ],
            options={
                'db_table': 'SubChapter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subid', models.AutoField(db_column='SubID', primary_key=True, serialize=False)),
                ('subjectid', models.CharField(blank=True, db_column='SubjectID', max_length=30, null=True)),
                ('subjectname', models.CharField(blank=True, db_column='SubjectName', max_length=100, null=True)),
                ('year', models.CharField(blank=True, db_column='Year', max_length=10, null=True)),
                ('semester', models.CharField(blank=True, db_column='Semester', max_length=10, null=True)),
                ('statussubject', models.TextField(blank=True, db_column='StatusSubject', null=True)),
                ('deletetimesubject', models.DateTimeField(blank=True, db_column='DeleteTimeSubject', null=True)),
                ('createtimesubject', models.DateTimeField(blank=True, db_column='CreateTimeSubject', null=True)),
            ],
            options={
                'db_table': 'Subject',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('typesid', models.AutoField(db_column='TypesID', primary_key=True, serialize=False)),
                ('typesname', models.CharField(blank=True, db_column='TypesName', max_length=50, null=True)),
                ('limitsubject', models.IntegerField(blank=True, db_column='LimitSubject', null=True)),
                ('limitexam', models.IntegerField(blank=True, db_column='LimitExam', null=True)),
                ('limitque', models.IntegerField(blank=True, db_column='LimitQue', null=True)),
            ],
            options={
                'db_table': 'Type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('userid', models.AutoField(db_column='UserID', primary_key=True, serialize=False)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=255, null=True)),
                ('fullname', models.TextField(blank=True, db_column='FullName', null=True)),
                ('password', models.CharField(blank=True, db_column='Password', max_length=255, null=True)),
                ('salt', models.CharField(blank=True, db_column='Salt', max_length=64, null=True)),
                ('googleid', models.TextField(blank=True, db_column='GoogleId', null=True)),
                ('job', models.TextField(blank=True, db_column='Job', null=True)),
                ('department', models.TextField(blank=True, db_column='Department', null=True)),
                ('faculty', models.TextField(blank=True, db_column='Faculty', null=True)),
                ('workplace', models.TextField(blank=True, db_column='Workplace', null=True)),
                ('tel', models.CharField(blank=True, db_column='Tel', max_length=10, null=True)),
                ('usageformat', models.CharField(blank=True, db_column='Usageformat', max_length=10, null=True)),
                ('imge_kyc_path', models.TextField(blank=True, db_column='ImgE_KYC_path', null=True)),
                ('e_kyc', models.CharField(blank=True, db_column='E_KYC', max_length=20, null=True)),
                ('createtimeuser', models.DateTimeField(blank=True, db_column='CreateTimeUser', null=True)),
            ],
            options={
                'db_table': 'User',
                'managed': False,
            },
        ),
    ]
